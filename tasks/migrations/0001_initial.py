# Generated by Django 5.2.5 on 2025-09-07 20:37

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('services', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ServiceRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('budget', models.DecimalField(decimal_places=2, help_text='Budget proposé en MRU', max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('location', models.CharField(max_length=300)),
                ('preferred_time', models.CharField(max_length=100)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('status', models.CharField(choices=[('published', 'Publiée'), ('active', 'En cours'), ('work_completed', 'Travail terminé'), ('completed', 'Terminée'), ('cancelled', 'Annulée')], default='published', max_length=20)),
                ('final_price', models.DecimalField(blank=True, decimal_places=2, help_text='Prix final négocié', max_digits=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('accepted_at', models.DateTimeField(blank=True, null=True)),
                ('work_completed_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('cancelled_at', models.DateTimeField(blank=True, null=True)),
                ('is_urgent', models.BooleanField(default=False)),
                ('requires_materials', models.BooleanField(default=True)),
                ('assigned_worker', models.ForeignKey(blank=True, limit_choices_to={'role': 'worker'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tasks', to=settings.AUTH_USER_MODEL)),
                ('client', models.ForeignKey(limit_choices_to={'role': 'client'}, on_delete=django.db.models.deletion.CASCADE, related_name='service_requests', to=settings.AUTH_USER_MODEL)),
                ('service_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_requests', to='services.servicecategory')),
            ],
            options={
                'verbose_name': 'Service Request',
                'verbose_name_plural': 'Service Requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application_message', models.TextField(blank=True, default="Je suis disponible pour cette tâche et j'ai l'expérience nécessaire.", help_text='Message du candidat (optionnel)')),
                ('application_status', models.CharField(choices=[('pending', 'En attente'), ('accepted', 'Acceptée'), ('rejected', 'Refusée')], default='pending', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('applied_at', models.DateTimeField(auto_now_add=True)),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('service_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='tasks.servicerequest')),
                ('worker', models.ForeignKey(limit_choices_to={'role': 'worker'}, on_delete=django.db.models.deletion.CASCADE, related_name='task_applications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Task Application',
                'verbose_name_plural': 'Task Applications',
                'ordering': ['-applied_at'],
                'unique_together': {('service_request', 'worker')},
            },
        ),
        migrations.CreateModel(
            name='TaskNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('task_posted', 'Nouvelle tâche publiée'), ('application_received', 'Nouvelle candidature reçue'), ('application_accepted', 'Candidature acceptée'), ('application_rejected', 'Candidature refusée'), ('work_started', 'Travail commencé'), ('work_completed', 'Travail terminé'), ('task_completed', 'Tâche terminée'), ('payment_completed', 'Paiement effectué'), ('review_received', 'Évaluation reçue'), ('task_cancelled', 'Tâche annulée')], max_length=50)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('is_sent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_notifications', to=settings.AUTH_USER_MODEL)),
                ('service_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='tasks.servicerequest')),
                ('task_application', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='tasks.taskapplication')),
            ],
            options={
                'verbose_name': 'Task Notification',
                'verbose_name_plural': 'Task Notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(help_text='Note de 1 à 5 étoiles', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('review_text', models.TextField(blank=True, help_text='Commentaire sur le service (optionnel)')),
                ('would_recommend', models.BooleanField(default=True)),
                ('is_public', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(limit_choices_to={'role': 'client'}, on_delete=django.db.models.deletion.CASCADE, related_name='given_reviews', to=settings.AUTH_USER_MODEL)),
                ('service_request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='review', to='tasks.servicerequest')),
                ('worker', models.ForeignKey(limit_choices_to={'role': 'worker'}, on_delete=django.db.models.deletion.CASCADE, related_name='received_reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Task Review',
                'verbose_name_plural': 'Task Reviews',
                'ordering': ['-created_at'],
            },
        ),
    ]
